x <- list(a = matrix(1:4, 2, 2), b = matrix(1:6, 3, 2))
function(elt) elt[,1]
function(elt) x$a[,1]
z <- function(elt) x$a[,1]
z
x$a[,1]
str(runif)
f1 <- gl(2,5)
f2 <- gl(5,2)
f1
f2
interaction(f1,f2)
y ~ x
library("swirl")
swirl
swirl()
head(flags)
dim(flags)
class(flags)
cls_list <- lapply(flags, class)
cls_list
class(cls_list)
as.character(cls_list)
cls_list <- sapply(flags, class)
cls_vect <- sapply(flags, class)
class(cls_vect)
sum(flags$orange)
flag_colors <- flags[, 11:17]
head(flag_colors)
lapply(flag_colors, sum)
sapply(flag_colors, sum)
sapply(flag_colors, mean)
flag_shapes <- flags [, 19:23]
lapply(flag_shapes, range)
shape_mat <- sapply(flag_shapes, range)
shape_mat
class(shape_mat)
unique(c(3,4,5,5,5,6,6))
unique_vals <- lapply(flags, unique)
unique_vals
length(unique_vals)
lapply(unique_vals, length)
sapply(unique_vals, length)
unique_vals <- sapply(flags, unique)
sapply(flags, unique)
lapply(unique_vals, function(elem) elem[2])
library("swirl")
swirl()
sapply(flags, unique)
vapply(flags, unique, numeric(1))
ok()
sapply(flags, class)
vapply(flags, class, character(1))
?tapply
table(flags$landmass)
table(flags$animate)
tapply(flags$animate, flags$landmass, mean)
tapply(flags$population, flags$red, summary)
tapply(flags$population, flags$landmass, summary)
exit
library(datasets)
data(iris)
?iris
lapply(iris, mean)
tapply (iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
apply(iris, 2, mean)
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
apply(iris, 1, mean)
library(datasets)
data(mtcars)
?mtcars
lapply(mtcars, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
mean(mtcars$mpg, mtcars$cyl)
sapply(mtcars, cyl, mean)
split(mtcars, mtcars$cyl)
tapply(mtcars$mpg, mtcars$cyl, mean)
with(mtcars, tapply(mpg, cyl, mean))
tapply(mtcars$cyl, mtcars$mpg, mean)
apply(mtcars, 2, mean)
debug(ls)
function (name, pos = -1L, envir = as.environment(pos), all.names = FALSE,
pattern, sorted = TRUE)
{
if (!missing(name)) {
pos <- tryCatch(name, error = function(e) e)
if (inherits(pos, "error")) {
name <- substitute(name)
if (!is.character(name))
name <- deparse(name)
warning(gettextf("%s converted to character string",
sQuote(name)), domain = NA)
pos <- name
}
}
all.names <- .Internal(ls(envir, all.names, sorted))
if (!missing(pattern)) {
if ((ll <- length(grep("[", pattern, fixed = TRUE))) &&
ll != length(grep("]", pattern, fixed = TRUE))) {
if (pattern == "[") {
pattern <- "\\["
warning("replaced regular expression pattern '[' by  '\\\\['")
}
else if (length(grep("[^\\\\]\\[<-", pattern))) {
pattern <- sub("\\[<-", "\\\\\\[<-", pattern)
warning("replaced '[<-' by '\\\\[<-' in regular expression pattern")
}
}
grep(pattern, all.names, value = TRUE)
}
else all.names
}
apply(iris[, 1:4], 2, mean)
q
exit
apply(iris[, 1:4], 2, mean)
rowMeans(iris[, 1:4])
apply(iris[, 1:4], 1, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
?mtcar
sapply(split(mtcars$mpg, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
apply(iris[, 1:4], 1, mean)
apply(iris[, 1:4], 2, mean)
exit
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
zz <- function (x = matrix())
{zz2 <- c(1, 2)}
zz
a <- matrix(1:6, 3, 2)
a
b <- solve (a)
str(solve)
solve
solve()
dim (a)
dim(a)$
1
b <- dim(a)
b
if b[1] = b[2] then "cuadrada" else "no cuadrada"
b[1]
if b[1] = b[2] then print "cuadrada" else print "no cuadrada"
if b[1] = b[2]
if b[1] = b[2] {print "cuadrada"}
if b[1] == b[2] then "cuadrada" else "no cuadrada"
if b[1] == b[2] {print "cuadrada" else print "no cuadrada"}
b[1]
if b[1] > 2
if b[[1]] > 2
if b > 2
if (b[1] == b[2]) {print "cuadrada" else print "no cuadrada"}
if (b[1] == b[2]) print "cuadrada" else print "no cuadrada"
if (b[1] == b[2]) print cuadrada else print no cuadrada
if (b[1] == b[2])
c <- "cuadrada"
c
if (b[1] == b[2])
cc <- "hola"}
if (b[1] == b[2]) { }
(b[1] == b[2])
(b[1] != b[2])
a <- matrix (1:4, 2, 2)
solve (a)
a
solve(a)
b <- solve (a)
a = b
a
b
identical(a, b)
a <- matrix (1:4, 2, 2)
identical(a, b)
source ("cachematrix.R")
getwd()
setwd("C:/CMX/0-Actual/999-NewBic/99-Data Science/00-Coursera Data Science Specialization/02-R Programming/02-Programming with R")
source ("cachematrix.R")
setwd("C:/CMX/0-Actual/999-NewBic/99-Data Science/00-Coursera Data Science Specialization/02-R Programming/02-Programming with R/ProgrammingAssignment2")
source ("cachematrix.R")
a <- matrix(1:9, 3, 3)
b <- solve (a)
a <- matrix(1:4, 2, 2)
b <- solve (a)
b
a
makeCacheMatrix(a)
cacheSolve(a)
a
class(a)
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
cachemean(a)
makeCacheMatrix <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
cacheSolve <- function(x, ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve()
if (!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
cacheSolve(z)
cacheSolve(a)
cachemean(a)
z <- C(1,5, 7)
zz <- c(1, 5, 7)
cachemean(zz)
is.atomic(a)
a
cacheSolve(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
cacheSolve(a)
source("cachematrix.R")
source("cachematrix.R")
cacheSolve(a)
makeCacheMatrix(a)
cacheSolve(a)
makeCacheMatrix(a)
cacheSolve(a)
x
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
aaa <- C(1,4, 5)
aaa <- c(1, 4, 5)
cachemean(aaa)
makeVector (aaa)
cachemean(aaa)
is.atomic(aaa)
source("cachematrix.R")
cacheSolve(a)
m
zx
x
makeCacheMatrix()
source("cachematrix.R")
makeCacheMatrix()
cacheSolve()
cachemean()
source("cachematrix.R")
makeCacheMatrix()
cacheSolve()
source("cachematrix.R")
cacheSolve()
makeCacheMatrix(a)
a
b
a
makeCacheMatrix(a)
m
get
makeCacheMatrix$    get
makeCacheMatrix$get
zzz <- makeCacheMatrix(a)
zzz
str(zzz)
zzz(a)
zzz$set()
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
a <- matrix(7:10, 2, 2)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
source("cachematrix.R")
a <- matrix(7:10, 2, 2)
source("cachematrix.R")
a <- matrix(7:10, 2, 2)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
x
cacheSolve(makeCacheMatrix(a))$x
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
a <- matrix(1:4, 2, 2)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
message("kk")
debug()
debug(cacheSolve)
cacheSolve(makeCacheMatrix(a))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
m
return(m)
m
a <- matrix(1:4, 2, 2)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
a <- matrix(7:10, 2, 2)
cacheSolve(makeCacheMatrix(a))
a <- matrix(7:10, 2, 2)
makeCacheMatrix <- function(x = matrix()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setsolve <- function(solve) m <<- solve
getsolve <- function() m
list (set = set, get = get,
setsolve = setsolve,
getsolve = getsolve)
}
## This function computes the inverse of the special "matrix" returned by
## makeCacheMatrix
## If the inverse has already been calculated (and the matrix has not changed),
## then retrieve the inverse from the cache
cacheSolve <- function(x = matrix(), ...) {
## Return a matrix that is the inverse of 'x'
m <- x$getsolve
if (!is.null(m)){ ## If the inverse has already been calculated (and the matrix has not changed)
message("getting cached data") ## retrieve the inverse from the cache
return(m)
}
data <- x$get()
m <- solve(data, ...)
x$setsolve(m)
m
}
a <- matrix(7:10, 2, 2)
cacheSolve(makeCacheMatrix(a))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
a <- matrix(1.4, 2, 2)
cacheSolve(makeCacheMatrix(a))
a <- matrix(1:4, 2, 2)
cacheSolve(makeCacheMatrix(a))
a <- matrix(1:4, 2, 2)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
makeCacheMatrix(a)
cacheSolve(a)
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
debug(cacheSolve)
cacheSolve(makeCacheMatrix(a))
cacheSolve(makeCacheMatrix(a))
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
The following function calculates the mean of the special "vector"
created with the above function. However, it first checks to see if the
mean has already been calculated. If so, it `get`s the mean from the
cache and skips the computation. Otherwise, it calculates the mean of
the data and sets the value of the mean in the cache via the `setmean`
function.
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
zzz <- c(1, 2, 4)
cachemean(makeVector(zzz))
cachemean(makeVector(zzz))
cachemean(makeVector(zzz))
cachemean(makeVector(zzz))
zzz <- c(1,7,7)
cachemean(makeVector(zzz))
cachemean(makeVector(zzz))
cacheSolve(makeCacheMatrix(a))
(makeCacheMatrix(a)
makeCacheMatrix(a)
x
y
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
a
source("cachematrix.R")
cacheSolve(makeCacheMatrix(a))
